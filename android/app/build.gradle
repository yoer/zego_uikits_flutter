

plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

apply plugin: 'com.google.gms.google-services'

android {
    namespace = "com.zegocloud.zegouikit.example.prebuiltcall"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        // 启用核心库 Desugaring
        // Desugaring（脱糖）：允许在旧版本 Android（API 21+）上使用 Java 8+ 的新 API
        // 例如：java.time.*, java.util.stream.*, java.util.function.* 等
        // 某些 Flutter 插件（如 flutter_local_notifications）依赖这些新 API
        coreLibraryDesugaringEnabled = true
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.zegocloud.zegouikit.example.prebuiltcall"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = 23 // flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    buildTypes {
        debug {
            debuggable true
        }
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug

            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    
    // 配置16KB页面大小支持
    packagingOptions {
        jniLibs {
            useLegacyPackaging = false
        }
    }
}

flutter {
    source = "../.."
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}
def flutterRoot = localProperties.getProperty('flutter.sdk')

dependencies {
    //Introduce Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:31.0.2')

    // Add dependencies for Firebase SDK for Google Analytics and FCM.
    // When using BoM, do not specify the version in the Firebase dependency
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-messaging:23.2.1'
    implementation 'im.zego:zpns-fcm:2.8.0' //ZPNs package for Google FCM push

    /// Core library desugaring（核心库脱糖）
    /// 提供 Java 8+ API 的向后兼容实现，使其能在 Android 5.0（API 21）及以上版本运行
    /// 这个库将新 API 转换（"脱糖"）为旧版本 Android 能理解的代码
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.4'

    /// if annotation not found
    /// implementation 'androidx.annotation:annotation:1.7.0'

    /// flutter not found
    compileOnly files("$flutterRoot/bin/cache/artifacts/engine/android-arm/flutter.jar")
}

